1.Created a folder naming codeial
2.Created a file index.js
3.npm init in codeial:package.json Created
4.Created folders eg routes(/home,/profile),controllers(.get function),models(schemas),view(html files),config(configurations).
5.Express install 
6.const express = require('express'),const app =express(),const port = 8000; and using app.listen in index js
7.We inside package.json inside scripts chnages start = nodemon index.js it means now if i run npm start it will work same as I run nodemon index.js
8.git init inside codeial
9.As nodemodules files is too heavy i make a gitignore file and specify path of it inside this file,now git wont track it.
10.Now added changes by git add . and commited the changes.
9.In routes folder in which we create a index.js file which will have routes.
10.Some Commands at top and after that module.exports to export this file to index.js
11.In index.js root  we created a middleware which calls on route every time server starts.
12.To check routes is working just console.log at routes index.js and see the terminal for confirmation 
13.Now whem we write app.get or post we specify a route and a function.When these function or actions are written in collection is called controllers.
14.We created home_controller file in controller folder and made a home named object which returned h1 .
15.Now we went to routes and mentioned const homeController = require('../controllers/home_controller') in index js; now we write a route.get(....) to initialize it.
16.localhost8000 gives result as output from controller. 
17.Made another route and controller of users. Here main thing i learned is the mentioning of route inside index.js for users.js and http://localhost:8000/users/profile gives us output.

----> index.js is accessed first there app.use redirects to routes index.js here if url is http://localhost:8000/users/profile then app.use(/users...) is selected and redirects to users.js and there runs the controllers profile object
18.Setted up view engine by npm install ejs and then setted view engine as ejs and allocated path for it in index.js root .
19.Now we created a view in views folder naming home.ejs and wrote some html in it now we have to render it on home so we went to homw controller .js where we has res.end now we chnaged it to res.render and ran the server on localhost8000 it gave us the o/p from view engine.

20.Partial and Layouts in VIEWS: Now we see in a social media that out header or footer is constant while part between it changes, for eg sometimes we need a signup form so we dont create it again and again rather we write code for signup ina seperate file and use it again and again.
This is partial.
21.Now layout is the HTML template, in which you specify the fixed header or footer ie partial + the variable area which changes as you visit different web pages.
            
22.We created partials using  <%-include('_header'); %> and <%-include('_footer'); %> in home.ejs and user profile.Intially we made header and footer tag and wrote into that but later we made two files for header and footer and included it in the home and user profile .ejs files.

23.We used a library for layouts and installed it using npm install exress-ejs-layouts.

24.In root index.js we include const expressLayouts = require('express-ejs-layouts'); for including it and then app.use(expressLayouts);  before routing because in routes those views are going to be rendered for that you need to tell the all views that to be rendered belong to some sort of layout.

25.In layout.ejs we made a normal html file with 
            <%- body %> (variable part)element this body is include in exprees ejs layout library it renders view from home and user profile .ejs

26.How it works : controller says it wants to render user profile.ejs  since my express ejs layout is being used by app ie app.use(expresslayouts),it finds a wrapper which cover my userprofile.ejs so wrapper(layout.ejs) is rendered with userprofile.ejs is sent to browser.

27.We added static files for which we first included path of static folder app.use(express.static('./assets')); in this folder we created a file in css folder ie layout.css and wrote some css now to enable this css in pages we linked it in layout.ejs file 

28.Now when we want to apply css to different pages or js , one way is to link sheet in every ejs file and that would be rendered via layout . ejs but that not a convenient and efficient process therefore we want to replace link of respective style sheet to be replaced with link or script tag in the layout.ejs file.
For this use app.set('layout extractStyles',true);
app.set('layout extractScripts',true); in root index .js and in layout js use   <%- style%> and  <%- script%> tags they would replace the respective tags from respective pages to these position.

29. We  now connect to db, for this we made a file mongoose.js inside config, and then installed mongoose using npm install mongoose and then we made several statements in this file.

30.In index.js we used const db =require('./config/mongoose'); for connecting the db with server.


31. <------MANUAL AUTHENTICATION ----->
in this we created a file user.js in models folder and schema was created for sign up having name email and password with timestamp.

32.We created two files singup.ejs and signin.ejs 

33.Now to connect these files we updated usercontroller .js in whcih we created signup and signin functions and then we updated in routes folder user.js file and updated the get functions.

34.Now we make forms on signup and signin pages in ejs files , in signup we created a form and for that form we just declared action in usercontroller.js in controller folder,similarly when we created form for sign in for sign in we need a session because its not permanent so we created a path as create_session there and in usercontroller.js inside controller folder we created the action for the same.


35.Now setting cookie-parser for reading and writing into cookies, installed it using npm install cookie-parser.
and then in root index.js added const cookieParser = require('cookie-parser'); and then app.use(cookieParser()); in order to use it.


36.In signup procedure we edited the usercontroller.js in controller folder where we edited the create function. Now to export User schema we used const User = require('../models/user'); to include specific functions of schema and used it.

37. We added a route of type post name /create in user.js in routes folder and tried running the server.

38. In sign in we edited the create session in usercontroller.js in controller folder and then added the route (post) in user.js in routes folder.


39.Now we updated the profile function in usercontroller.js amd added functionalities to it and updated user_profile.ejs with p tags.


40.<------AUTHENTICATION USING PASSPORTJS------>
we installed passport using npm install passport and used local startegy therefore again we installed npm intall passport-local

41.Now in config folder we made a new file passport-local-strategy.js file.In this file we first imported passport and passport local startegy.

42.Now we also imported USer from modes/user by const User = require('../models/user');, now using passport.use we created a new local strategy with parameter as email.

43.Now we created a function which finds user and establishes its identity.
 44.Created serialize function which tells what part of user stored in cookie we here stored the userid.

 45.Created deserialize function tells the server to check the id of user from database this fnction is performed by deserialzer

 
 46.Now we may thin that automatically our cookie will be encrypted and stored but its not, it is done using a library express-session, install it using npm install express-session.

 47.Now in root index .js below mongoose we wtote const session = require('express-session'); and we also require passport and local startegy.

 48.Now we add a middleware which takes session cookie and encrypts it. below views.(ORDER IS ESSENTIAL),app.use(session({
    name:'codeial',
    secret:"blahsomething",
    saveUninitialized:false,
    resave:false,
    cookie:{maxAge:(1000 * 60 * 100)}
}));

49.Now after this we need to tell app to use passport  therefore app.use(passport.initialize());
app.use(passport.session());

50. We go to users controler and complete create_session function. Assuming the user has signed in ,when passportjs uses local startegy to authenticate the user the contrl comes over create_session function and this function redirects to homepage.(Session is creted in passportjs itself)

51. now go to routes folder in users.js complete the route for create_session.

52.We made functions in passport-local-strategy file ie checkAuthentication and setAuthenticatedUser .
Our main task for this is to send data of signed in user to views.
in checkAuth function we check if user is authenticated its a middleware because its has req res and next.isAuthenticated is passport function check user is signed in or not.

53.Now in setAuthenticatedUser function ,wheneever a user is signed in its info is stord in req.user now to tranfer it to res.local we eqauted both.

54.Now go to routes and then in user.js check that profile should only be visible when user is logged in therefore use methos passport.checkAuthentication to check it .

55.Now go to index.js root set up cuurent user usage by app.use(passport.setAuthenticatedUser); it check whether a session cookie is there or not


56.Now in views section we rendered views n userprofile js , and solved problem of returning to signed in page when we pressed bavk on signin page after login to solve this problem we used a function in signup and signin  functions of usercontroller.js if(req.isAuthenticated())
    {
        return res.redirect('/users/profile');
    }



57.Solved problem of session cookie reset when we restart server : USE MONGO STORE AND LIBRARY CONNECT MONGO in index.js root we wrote  const MongoStore = require('connect-mongo')(session); and then in app.use we wrote a store:new MongoStore(
        {
       
        mongooseConnection:db,
        autoRemove:'disabled'
        },
        function(err)
        {
            console.log(err||'connect-mongodb setup -ok');
        }
    ) then sign in the local host and check by disconnecting server we are not logged out problem solved using mongo connect


58. Now we implemented signout function we made a header chnages in header.ejs and defined a route for signout here now we go to usercontroller.ejs and defined destroySession function and completed the route for the same in routes folder user.js.

59.Now we create posts in social media,we made a file post.js in models and derived(user in schema is a refernce to user in DB USER) a schema there.Now we made chnages in home.ejs file in whcih we added a form

60.Now we made a file in controller ie posts_controller.js where we created a action where we created an action which took data from browser and sent to the db.For this we need to map it to routes. therefore in routes we created a file posts.js for routes of posts and then router.use in index.js in routes folder to map this route to root index.js.and then we updated the action in home.ejs of the form.


61.In posts_controller  user:req.user._id this the req.user comes from setAuthenticatedUser function in passportlocalstaryegy in config folder and we only need id therefore .id

62.Now in homecontroller.ejs we found posts using post.find and showed it using home.ejs file,now we also wanted to show the user  who own that post for that we needed to fetch author from db along with post.W fetched using prepoluating the user and then displayed user on the page. using home.ejs

63.Now we want that no onle else can subit post except user therefore in home.ejs i used authetication that is user is logged in then only we would allow form to appear but anyone can ispect and create a form and submit it therefore for this we used passport.checkAuthentication function in routes flder posts.js file to enable 2 point AUTHENTICATION

64.For comments I created a schema for comments in comments.js in models folder .
In Post schema we created an arrayu of comments in posts schemea for faster execution of comments.

65.working for comments first we went to home.ejs and made a form for comments and applied authetication condition to it.Now we made a file in controllers named comment_controller.js in this file we first addded schema const Comment = require('../models/comment');
const Post = require('../models/post'); and then logic for comments now ,First we find a post if it exists or not so we find the post by post id if post is preswnt then we create comment and side by side push comment id intto array of comments id in post schema and save it.

66.Now we need to show comments and author of comments therefore -> preload the comments and show them.We performed nested operation and fetched the user who commented and list of comments.

67.Now we delete a post authorized way.For this we go to posts_controller.js  we created a action here first we find is that am i authorized to delete any others post so we verify it here => user who is deleting the post is the user who wrote that post then we delete the post as well as comments from the comment schema and comment array in post.If user didnt match just return back.No we made a route in posts.js naming it /destroy and adding authenticaton to it.

68.Now we move to home.ejs make a button for delete and appl y authentication to that button only if theuser is signed in and same as the user who posted it.

69.Now we want to delete the comments its a tidious task for this we go to controller .js file we add a action destroy here and here we check if user of comment or owner is the one who deletes it then only delete it from comments and from the array of comments.Now we specify a route in comments.js in routes folder and then we specify the button with authorization permission in the home.ejs file.

70.Now we want to display all users in home screen and only if user is signed in . WE need to get list of all user we go to homecontrollerr.js we first require User and find all users   User.find({},function(err,users)
        {
            return res.render('home',{
                title:"Codeial | Home",
                posts: posts,
                all_users:users
        })  
all_users:users is used to send all the suers then we go to home.ejs and make sepetrate section for friends.Now we go to user.js in routes and update profile route with id. and from here we go to user controller where there is profile page we make chnages for it. to locate user we use USer.FindbyId and send thus useer to frontend using profile_user:user,wo dont use users key bcoz its already in users. and then we go userprofile.ejs and update the html ejs there as profile_user.name etc.


71.Now i try to update name and email of user for that i first make a formm and authenticate it using if else condn.
now we got to usercontroller.js in controller folder and then we make and action for it and then a respective route for it in users.js in routes folder.


72.Now we are simplifiyng our code by applying async await in 1.Homecontrolleer.js 2.posts_controller.js 3.comment_controller


73. Flash messages are stored in session cookies  and  clered in next request.therfore dspled only once we used library connect flash npm install connect flash, then in root indexjs we added const flash at top and start using it . and then just above app.use routes we wrote app.use flash. now we go to users controller and in login and logout code we wrote  req.flash('success','Logged in Successfully');  and same for logout.

74.Now we need to send to response but its req.flash so to tranport to reponse ww created a middleware so we made a folder middleware.js in config and wrote a middleware . and then in root index.js we first required this middleware named customMware and the used it using app.use below app.use(flassh)


75. We used noty js for colorful notification and used it in layout.ejs with help of cdn

76. Now we added flash messages to posts and comments in postscontroler and comment_controller files.

77.Now there is a flaw that wehen ever we post a post the controller refresges the page we dont want this so we use AJAx to solve this problem.
We first inlcuded ajax cdn in layoutejs and then in assets in js we created home_post js file in which we handled ajax. and then conncted home.ejs with this file location at last with script tag.Now after making chnages in home_post.js we then went to posts_controller where we made chnages to accept response from ajax. 
