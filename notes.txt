1.Created a folder naming codeial
2.Created a file index.js
3.npm init in codeial:package.json Created
4.Created folders eg routes(/home,/profile),controllers(.get function),models(schemas),view(html files),config(configurations).
5.Express install 
6.const express = require('express'),const app =express(),const port = 8000; and using app.listen in index js
7.We inside package.json inside scripts chnages start = nodemon index.js it means now if i run npm start it will work same as I run nodemon index.js
8.git init inside codeial
9.As nodemodules files is too heavy i make a gitignore file and specify path of it inside this file,now git wont track it.
10.Now added changes by git add . and commited the changes.
9.In routes folder in which we create a index.js file which will have routes.
10.Some Commands at top and after that module.exports to export this file to index.js
11.In index.js root  we created a middleware which calls on route every time server starts.
12.To check routes is working just console.log at routes index.js and see the terminal for confirmation 
13.Now whem we write app.get or post we specify a route and a function.When these function or actions are written in collection is called controllers.
14.We created home_controller file in controller folder and made a home named object which returned h1 .
15.Now we went to routes and mentioned const homeController = require('../controllers/home_controller') in index js; now we write a route.get(....) to initialize it.
16.localhost8000 gives result as output from controller. 
17.Made another route and controller of users. Here main thing i learned is the mentioning of route inside index.js for users.js and http://localhost:8000/users/profile gives us output.

----> index.js is accessed first there app.use redirects to routes index.js here if url is http://localhost:8000/users/profile then app.use(/users...) is selected and redirects to users.js and there runs the controllers profile object
18.Setted up view engine by npm install ejs and then setted view engine as ejs and allocated path for it in index.js root .
19.Now we created a view in views folder naming home.ejs and wrote some html in it now we have to render it on home so we went to homw controller .js where we has res.end now we chnaged it to res.render and ran the server on localhost8000 it gave us the o/p from view engine.

20.Partial and Layouts in VIEWS: Now we see in a social media that out header or footer is constant while part between it changes, for eg sometimes we need a signup form so we dont create it again and again rather we write code for signup ina seperate file and use it again and again.
This is partial.
21.Now layout is the HTML template,