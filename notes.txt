1.Created a folder naming codeial
2.Created a file index.js
3.npm init in codeial:package.json Created
4.Created folders eg routes(/home,/profile),controllers(.get function),models(schemas),view(html files),config(configurations).
5.Express install 
6.const express = require('express'),const app =express(),const port = 8000; and using app.listen in index js
7.We inside package.json inside scripts chnages start = nodemon index.js it means now if i run npm start it will work same as I run nodemon index.js
8.git init inside codeial
9.As nodemodules files is too heavy i make a gitignore file and specify path of it inside this file,now git wont track it.
10.Now added changes by git add . and commited the changes.
9.In routes folder in which we create a index.js file which will have routes.
10.Some Commands at top and after that module.exports to export this file to index.js
11.In index.js root  we created a middleware which calls on route every time server starts.
12.To check routes is working just console.log at routes index.js and see the terminal for confirmation 
13.Now whem we write app.get or post we specify a route and a function.When these function or actions are written in collection is called controllers.
14.We created home_controller file in controller folder and made a home named object which returned h1 .
15.Now we went to routes and mentioned const homeController = require('../controllers/home_controller') in index js; now we write a route.get(....) to initialize it.
16.localhost8000 gives result as output from controller. 
17.Made another route and controller of users. Here main thing i learned is the mentioning of route inside index.js for users.js and http://localhost:8000/users/profile gives us output.

----> index.js is accessed first there app.use redirects to routes index.js here if url is http://localhost:8000/users/profile then app.use(/users...) is selected and redirects to users.js and there runs the controllers profile object
18.Setted up view engine by npm install ejs and then setted view engine as ejs and allocated path for it in index.js root .
19.Now we created a view in views folder naming home.ejs and wrote some html in it now we have to render it on home so we went to homw controller .js where we has res.end now we chnaged it to res.render and ran the server on localhost8000 it gave us the o/p from view engine.

20.Partial and Layouts in VIEWS: Now we see in a social media that out header or footer is constant while part between it changes, for eg sometimes we need a signup form so we dont create it again and again rather we write code for signup ina seperate file and use it again and again.
This is partial.
21.Now layout is the HTML template, in which you specify the fixed header or footer ie partial + the variable area which changes as you visit different web pages.
            
22.We created partials using  <%-include('_header'); %> and <%-include('_footer'); %> in home.ejs and user profile.Intially we made header and footer tag and wrote into that but later we made two files for header and footer and included it in the home and user profile .ejs files.

23.We used a library for layouts and installed it using npm install exress-ejs-layouts.

24.In root index.js we include const expressLayouts = require('express-ejs-layouts'); for including it and then app.use(expressLayouts);  before routing because in routes those views are going to be rendered for that you need to tell the all views that to be rendered belong to some sort of layout.

25.In layout.ejs we made a normal html file with 
            <%- body %> (variable part)element this body is include in exprees ejs layout library it renders view from home and user profile .ejs

26.How it works : controller says it wants to render user profile.ejs  since my express ejs layout is being used by app ie app.use(expresslayouts),it finds a wrapper which cover my userprofile.ejs so wrapper(layout.ejs) is rendered with userprofile.ejs is sent to browser.

27.We added static files for which we first included path of static folder app.use(express.static('./assets')); in this folder we created a file in css folder ie layout.css and wrote some css now to enable this css in pages we linked it in layout.ejs file 

28.Now when we want to apply css to different pages or js , one way is to link sheet in every ejs file and that would be rendered via layout . ejs but that not a convenient and efficient process therefore we want to replace link of respective style sheet to be replaced with link or script tag in the layout.ejs file.
For this use app.set('layout extractStyles',true);
app.set('layout extractScripts',true); in root index .js and in layout js use   <%- style%> and  <%- script%> tags they would replace the respective tags from respective pages to these position.

29. We  now connect to db, for this we made a file mongoose.js inside config, and then installed mongoose using npm install mongoose and then we made several statements in this file.

30.In index.js we used const db =require('./config/mongoose'); for connecting the db with server.


31. <------MANUAL AUTHENTICATION ----->
in this we created a file user.js in models folder and schema was created for sign up having name email and password with timestamp.

32.We created two files singup.ejs and signin.ejs 

33.Now to connect these files we updated usercontroller .js in whcih we created signup and signin functions and then we updated in routes folder user.js file and updated the get functions.

34.Now we make forms on signup and signin pages in ejs files , in signup we created a form and for that form we just declared action in usercontroller.js in controller folder,similarly when we created form for sign in for sign in we need a session because its not permanent so we created a path as create_session there and in usercontroller.js inside controller folder we created the action for the same.


35.Now setting cookie-parser for reading and writing into cookies, installed it using npm install cookie-parser.
and then in root index.js added const cookieParser = require('cookie-parser'); and then app.use(cookieParser()); in order to use it.


36.In signup procedure we edited the usercontroller.js in controller folder where we edited the create function. Now to export User schema we used const User = require('../models/user'); to include specific functions of schema and used it.

37. We added a route of type post name /create in user.js in routes folder and tried running the server.

